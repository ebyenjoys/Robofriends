{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","Cardlist","robots","map","item","i","key","SearchBox","onChange","search","type","placeholder","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","setState","Component","App","searchfield","onSearchChange","event","target","value","fetch","then","response","json","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OAgBeA,EAdF,SAACC,GAAW,IAEdC,EAAkBD,EAAlBC,KAAKC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACnB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCULK,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAKf,OACI,6BACKA,EAAOC,KAAI,SAACC,EAAKC,GACd,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAClBR,GAAIO,EAAKP,GACTF,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,aCJbW,EARG,SAACb,GACf,OACI,yBAAKI,UAAU,OACX,2BAAOU,SAAUd,EAAMe,OAAQX,UAAU,mCAAmCY,KAAK,SAASC,YAAY,oBCKnGC,G,MARA,SAAClB,GACZ,OACI,yBAAKmB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC3DtB,EAAMuB,YCHEC,E,kDAEjB,WAAYxB,GAAQ,IAAD,8BACf,gBAGJyB,MAAO,CACHC,UAAS,GALM,E,gEASfC,KAAKC,SAAS,CAACF,UAAS,M,+BAIxB,OAA0B,IAAvBC,KAAKF,MAAMC,SACH,6DAEJC,KAAK3B,MAAMuB,a,GAlBiBM,aCyD5BC,E,4MA/CXL,MAAQ,CACJjB,OAAQ,GACRuB,YAAa,I,EAajBC,eAAiB,SAACC,GAEd,EAAKL,SAAS,CAACG,YAAYE,EAAMC,OAAOC,S,kEAVvB,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAAAC,GAAY,OAAOA,EAASC,UACjCF,MAAK,SAAC7B,GAAY,EAAKoB,SAAS,CAACpB,OAAOA,S,+BAWvC,IAAD,EAEwBmB,KAAKF,MAA3BjB,EAFF,EAEEA,OAAOuB,EAFT,EAESA,YAERS,EAAiBhC,EAAOiC,QAAO,SAACC,GAElC,OAAQA,EAAMzC,KAAK0C,cAAcC,SAASb,EAAYY,kBAI1D,OAEI,yBAAKvC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,OAAQY,KAAKK,iBACxB,kBAAC,EAAD,KACA,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,OAAQgC,W,GAxCpBX,a,MCEEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,EAAD,MAIAC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a271e8b3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\r\n    const {name,email, id} = props;\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n\r\n    // if(true) {\r\n    //     throw new Error('Hell no');\r\n    // }\r\n    return(\r\n        <div>\r\n            {robots.map((item,i) =>{\r\n                return <Card key={i} \r\n                id={item.id} \r\n                name={item.name} \r\n                email={item.email}/>\r\n    })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react'\r\n\r\nconst SearchBox = (props) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input onChange={props.search} className='pa3 ba b--green bg-lightest-blue' type=\"search\" placeholder='Search Robtos'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY:'scroll',border:'1px solid black',height:'600px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ErrorBoundary extends Component {\r\n\r\n    constructor(props) {\r\n        super()\r\n    }\r\n\r\n    state ={\r\n        hasError:false\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({hasError:true})\r\n    }\r\n    render() {\r\n\r\n        if(this.state.hasError=== true) {\r\n            return <h1>Oops Somthing gone wrong here</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport  Cardlist from '../Components/Cardlist';\r\n// import {robots} from './robots';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        robots: [],\r\n        searchfield: ''\r\n    }\r\n\r\n    \r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response =>{return response.json();})\r\n            .then((robots) => {this.setState({robots:robots});})\r\n        \r\n    }\r\n\r\n\r\n    onSearchChange = (event) => {\r\n        // console.log(event.target.value);\r\n        this.setState({searchfield:event.target.value});\r\n    \r\n    }\r\n\r\n    render() {\r\n\r\n        const {robots,searchfield} = this.state;\r\n\r\n        const filteredRobots = robots.filter((robot) => {\r\n\r\n            return  robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        }) \r\n\r\n        // console.log(filteredRobots);\r\n        return (\r\n\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox search={this.onSearchChange}/>\r\n                <Scroll>\r\n                <ErrorBoundary>\r\n                    <Cardlist robots={filteredRobots}/>\r\n                </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\n\n// import Card from './Card';\nimport App from './Containers/App';\nimport 'tachyons';\n// import {robots} from './robots';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App/>,\n  // <React.StrictMode>\n    // <App />\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}